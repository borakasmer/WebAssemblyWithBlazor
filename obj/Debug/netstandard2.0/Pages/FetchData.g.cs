#pragma checksum "/Users/borakasmer/Projects/BlazorToDoList/Pages/FetchData.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "4272b12ae26a855276b41fafc29a1caa29da771d"
// <auto-generated/>
#pragma warning disable 1591
namespace BlazorToDoList.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using System.Net.Http;
    using Microsoft.AspNetCore.Blazor;
    using Microsoft.AspNetCore.Blazor.Components;
    using Microsoft.AspNetCore.Blazor.Layouts;
    using Microsoft.AspNetCore.Blazor.Routing;
    using BlazorToDoList;
    using BlazorToDoList.Shared;
    [Microsoft.AspNetCore.Blazor.Layouts.LayoutAttribute(typeof(MainLayout))]
    [Microsoft.AspNetCore.Blazor.Components.RouteAttribute("/fetchdata")]
    public class FetchData : Microsoft.AspNetCore.Blazor.Components.BlazorComponent
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder builder)
        {
            base.BuildRenderTree(builder);
            builder.AddContent(0, "\n");
            builder.OpenElement(1, "h1");
            builder.AddContent(2, "Weather forecast");
            builder.CloseElement();
            builder.AddContent(3, "\n\n");
            builder.OpenElement(4, "p");
            builder.AddContent(5, "This component demonstrates fetching data from the server.");
            builder.CloseElement();
            builder.AddContent(6, "\n\n");
            if (forecasts == null)
{
            builder.AddContent(7, "    ");
            builder.OpenElement(8, "p");
            builder.OpenElement(9, "em");
            builder.AddContent(10, "Loading...");
            builder.CloseElement();
            builder.CloseElement();
            builder.AddContent(11, "\n");
            }
else
{
            builder.AddContent(12, "    ");
            builder.OpenElement(13, "table");
            builder.AddAttribute(14, "class", "table");
            builder.AddContent(15, "\n        ");
            builder.OpenElement(16, "thead");
            builder.AddContent(17, "\n            ");
            builder.OpenElement(18, "tr");
            builder.AddContent(19, "\n                ");
            builder.OpenElement(20, "th");
            builder.AddContent(21, "Date");
            builder.CloseElement();
            builder.AddContent(22, "\n                ");
            builder.OpenElement(23, "th");
            builder.AddContent(24, "Temp. (C)");
            builder.CloseElement();
            builder.AddContent(25, "\n                ");
            builder.OpenElement(26, "th");
            builder.AddContent(27, "Temp. (F)");
            builder.CloseElement();
            builder.AddContent(28, "\n                ");
            builder.OpenElement(29, "th");
            builder.AddContent(30, "Summary");
            builder.CloseElement();
            builder.AddContent(31, "\n            ");
            builder.CloseElement();
            builder.AddContent(32, "\n        ");
            builder.CloseElement();
            builder.AddContent(33, "\n        ");
            builder.OpenElement(34, "tbody");
            builder.AddContent(35, "\n");
            foreach (var forecast in forecasts)
            {
            builder.AddContent(36, "                ");
            builder.OpenElement(37, "tr");
            builder.AddContent(38, "\n                    ");
            builder.OpenElement(39, "td");
            builder.AddContent(40, forecast.Date.ToShortDateString());
            builder.CloseElement();
            builder.AddContent(41, "\n                    ");
            builder.OpenElement(42, "td");
            builder.AddContent(43, forecast.TemperatureC);
            builder.CloseElement();
            builder.AddContent(44, "\n                    ");
            builder.OpenElement(45, "td");
            builder.AddContent(46, forecast.TemperatureF);
            builder.CloseElement();
            builder.AddContent(47, "\n                    ");
            builder.OpenElement(48, "td");
            builder.AddContent(49, forecast.Summary);
            builder.CloseElement();
            builder.AddContent(50, "\n                ");
            builder.CloseElement();
            builder.AddContent(51, "\n");
                        }
            builder.AddContent(52, "        ");
            builder.CloseElement();
            builder.AddContent(53, "\n    ");
            builder.CloseElement();
            builder.AddContent(54, "\n");
            }
            builder.AddContent(55, "\n");
        }
        #pragma warning restore 1998
        
    WeatherForecast[] forecasts;

    protected override async Task OnInitAsync()
    {
        forecasts = await Http.GetJsonAsync<WeatherForecast[]>("/sample-data/weather.json");
    }

    class WeatherForecast
    {
        public DateTime Date { get; set; }
        public int TemperatureC { get; set; }
        public int TemperatureF { get; set; }
        public string Summary { get; set; }
    }
        [global::Microsoft.AspNetCore.Blazor.Components.InjectAttribute] private HttpClient Http { get; set; }
    }
}
#pragma warning restore 1591
